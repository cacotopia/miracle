#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AccessInsertRTObject
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="CSE_DEPT")]
	public partial class CSE_DEPTDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertLogIn(LogIn instance);
    partial void UpdateLogIn(LogIn instance);
    partial void DeleteLogIn(LogIn instance);
    partial void InsertFaculty(Faculty instance);
    partial void UpdateFaculty(Faculty instance);
    partial void DeleteFaculty(Faculty instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertStudentCourse(StudentCourse instance);
    partial void UpdateStudentCourse(StudentCourse instance);
    partial void DeleteStudentCourse(StudentCourse instance);
    #endregion
		
		public CSE_DEPTDataContext() : 
				base(global::AccessInsertRTObject.Properties.Settings.Default.CSE_DEPTConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CSE_DEPTDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CSE_DEPTDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CSE_DEPTDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CSE_DEPTDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<LogIn> LogIns
		{
			get
			{
				return this.GetTable<LogIn>();
			}
		}
		
		public System.Data.Linq.Table<Faculty> Faculties
		{
			get
			{
				return this.GetTable<Faculty>();
			}
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<StudentCourse> StudentCourses
		{
			get
			{
				return this.GetTable<StudentCourse>();
			}
		}
	}
	
	[Table(Name="dbo.LogIn")]
	public partial class LogIn : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _user_name;
		
		private string _pass_word;
		
		private string _faculty_id;
		
		private string _student_id;
		
		private EntityRef<Faculty> _Faculty;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onuser_nameChanging(string value);
    partial void Onuser_nameChanged();
    partial void Onpass_wordChanging(string value);
    partial void Onpass_wordChanged();
    partial void Onfaculty_idChanging(string value);
    partial void Onfaculty_idChanged();
    partial void Onstudent_idChanging(string value);
    partial void Onstudent_idChanged();
    #endregion
		
		public LogIn()
		{
			this._Faculty = default(EntityRef<Faculty>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[Column(Storage="_user_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string user_name
		{
			get
			{
				return this._user_name;
			}
			set
			{
				if ((this._user_name != value))
				{
					this.Onuser_nameChanging(value);
					this.SendPropertyChanging();
					this._user_name = value;
					this.SendPropertyChanged("user_name");
					this.Onuser_nameChanged();
				}
			}
		}
		
		[Column(Storage="_pass_word", DbType="NVarChar(50)")]
		public string pass_word
		{
			get
			{
				return this._pass_word;
			}
			set
			{
				if ((this._pass_word != value))
				{
					this.Onpass_wordChanging(value);
					this.SendPropertyChanging();
					this._pass_word = value;
					this.SendPropertyChanged("pass_word");
					this.Onpass_wordChanged();
				}
			}
		}
		
		[Column(Storage="_faculty_id", DbType="NVarChar(50)")]
		public string faculty_id
		{
			get
			{
				return this._faculty_id;
			}
			set
			{
				if ((this._faculty_id != value))
				{
					if (this._Faculty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfaculty_idChanging(value);
					this.SendPropertyChanging();
					this._faculty_id = value;
					this.SendPropertyChanged("faculty_id");
					this.Onfaculty_idChanged();
				}
			}
		}
		
		[Column(Storage="_student_id", DbType="NVarChar(50)")]
		public string student_id
		{
			get
			{
				return this._student_id;
			}
			set
			{
				if ((this._student_id != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onstudent_idChanging(value);
					this.SendPropertyChanging();
					this._student_id = value;
					this.SendPropertyChanged("student_id");
					this.Onstudent_idChanged();
				}
			}
		}
		
		[Association(Name="Faculty_LogIn", Storage="_Faculty", ThisKey="faculty_id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Faculty Faculty
		{
			get
			{
				return this._Faculty.Entity;
			}
			set
			{
				Faculty previousValue = this._Faculty.Entity;
				if (((previousValue != value) 
							|| (this._Faculty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Faculty.Entity = null;
						previousValue.LogIns.Remove(this);
					}
					this._Faculty.Entity = value;
					if ((value != null))
					{
						value.LogIns.Add(this);
						this._faculty_id = value.faculty_id;
					}
					else
					{
						this._faculty_id = default(string);
					}
					this.SendPropertyChanged("Faculty");
				}
			}
		}
		
		[Association(Name="Student_LogIn", Storage="_Student", ThisKey="student_id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.LogIns.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.LogIns.Add(this);
						this._student_id = value.student_id;
					}
					else
					{
						this._student_id = default(string);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Faculty")]
	public partial class Faculty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _faculty_id;
		
		private string _faculty_name;
		
		private string _office;
		
		private string _phone;
		
		private string _college;
		
		private string _title;
		
		private string _email;
		
		private EntitySet<LogIn> _LogIns;
		
		private EntitySet<Course> _Courses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onfaculty_idChanging(string value);
    partial void Onfaculty_idChanged();
    partial void Onfaculty_nameChanging(string value);
    partial void Onfaculty_nameChanged();
    partial void OnofficeChanging(string value);
    partial void OnofficeChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OncollegeChanging(string value);
    partial void OncollegeChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    #endregion
		
		public Faculty()
		{
			this._LogIns = new EntitySet<LogIn>(new Action<LogIn>(this.attach_LogIns), new Action<LogIn>(this.detach_LogIns));
			this._Courses = new EntitySet<Course>(new Action<Course>(this.attach_Courses), new Action<Course>(this.detach_Courses));
			OnCreated();
		}
		
		[Column(Storage="_faculty_id", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string faculty_id
		{
			get
			{
				return this._faculty_id;
			}
			set
			{
				if ((this._faculty_id != value))
				{
					this.Onfaculty_idChanging(value);
					this.SendPropertyChanging();
					this._faculty_id = value;
					this.SendPropertyChanged("faculty_id");
					this.Onfaculty_idChanged();
				}
			}
		}
		
		[Column(Storage="_faculty_name", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string faculty_name
		{
			get
			{
				return this._faculty_name;
			}
			set
			{
				if ((this._faculty_name != value))
				{
					this.Onfaculty_nameChanging(value);
					this.SendPropertyChanging();
					this._faculty_name = value;
					this.SendPropertyChanged("faculty_name");
					this.Onfaculty_nameChanged();
				}
			}
		}
		
		[Column(Storage="_office", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string office
		{
			get
			{
				return this._office;
			}
			set
			{
				if ((this._office != value))
				{
					this.OnofficeChanging(value);
					this.SendPropertyChanging();
					this._office = value;
					this.SendPropertyChanged("office");
					this.OnofficeChanged();
				}
			}
		}
		
		[Column(Storage="_phone", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[Column(Storage="_college", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string college
		{
			get
			{
				return this._college;
			}
			set
			{
				if ((this._college != value))
				{
					this.OncollegeChanging(value);
					this.SendPropertyChanging();
					this._college = value;
					this.SendPropertyChanged("college");
					this.OncollegeChanged();
				}
			}
		}
		
		[Column(Storage="_title", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[Column(Storage="_email", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[Association(Name="Faculty_LogIn", Storage="_LogIns", OtherKey="faculty_id")]
		public EntitySet<LogIn> LogIns
		{
			get
			{
				return this._LogIns;
			}
			set
			{
				this._LogIns.Assign(value);
			}
		}
		
		[Association(Name="Faculty_Course", Storage="_Courses", OtherKey="faculty_id")]
		public EntitySet<Course> Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				this._Courses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LogIns(LogIn entity)
		{
			this.SendPropertyChanging();
			entity.Faculty = this;
		}
		
		private void detach_LogIns(LogIn entity)
		{
			this.SendPropertyChanging();
			entity.Faculty = null;
		}
		
		private void attach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Faculty = this;
		}
		
		private void detach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Faculty = null;
		}
	}
	
	[Table(Name="dbo.Course")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _course_id;
		
		private string _course1;
		
		private System.Nullable<double> _credit;
		
		private string _classroom;
		
		private string _schedule;
		
		private System.Nullable<int> _enrollment;
		
		private string _faculty_id;
		
		private EntitySet<StudentCourse> _StudentCourses;
		
		private EntityRef<Faculty> _Faculty;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncourse_idChanging(string value);
    partial void Oncourse_idChanged();
    partial void Oncourse1Changing(string value);
    partial void Oncourse1Changed();
    partial void OncreditChanging(System.Nullable<double> value);
    partial void OncreditChanged();
    partial void OnclassroomChanging(string value);
    partial void OnclassroomChanged();
    partial void OnscheduleChanging(string value);
    partial void OnscheduleChanged();
    partial void OnenrollmentChanging(System.Nullable<int> value);
    partial void OnenrollmentChanged();
    partial void Onfaculty_idChanging(string value);
    partial void Onfaculty_idChanged();
    #endregion
		
		public Course()
		{
			this._StudentCourses = new EntitySet<StudentCourse>(new Action<StudentCourse>(this.attach_StudentCourses), new Action<StudentCourse>(this.detach_StudentCourses));
			this._Faculty = default(EntityRef<Faculty>);
			OnCreated();
		}
		
		[Column(Storage="_course_id", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string course_id
		{
			get
			{
				return this._course_id;
			}
			set
			{
				if ((this._course_id != value))
				{
					this.Oncourse_idChanging(value);
					this.SendPropertyChanging();
					this._course_id = value;
					this.SendPropertyChanged("course_id");
					this.Oncourse_idChanged();
				}
			}
		}
		
		[Column(Name="course", Storage="_course1", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string course1
		{
			get
			{
				return this._course1;
			}
			set
			{
				if ((this._course1 != value))
				{
					this.Oncourse1Changing(value);
					this.SendPropertyChanging();
					this._course1 = value;
					this.SendPropertyChanged("course1");
					this.Oncourse1Changed();
				}
			}
		}
		
		[Column(Storage="_credit", DbType="Float")]
		public System.Nullable<double> credit
		{
			get
			{
				return this._credit;
			}
			set
			{
				if ((this._credit != value))
				{
					this.OncreditChanging(value);
					this.SendPropertyChanging();
					this._credit = value;
					this.SendPropertyChanged("credit");
					this.OncreditChanged();
				}
			}
		}
		
		[Column(Storage="_classroom", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string classroom
		{
			get
			{
				return this._classroom;
			}
			set
			{
				if ((this._classroom != value))
				{
					this.OnclassroomChanging(value);
					this.SendPropertyChanging();
					this._classroom = value;
					this.SendPropertyChanged("classroom");
					this.OnclassroomChanged();
				}
			}
		}
		
		[Column(Storage="_schedule", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string schedule
		{
			get
			{
				return this._schedule;
			}
			set
			{
				if ((this._schedule != value))
				{
					this.OnscheduleChanging(value);
					this.SendPropertyChanging();
					this._schedule = value;
					this.SendPropertyChanged("schedule");
					this.OnscheduleChanged();
				}
			}
		}
		
		[Column(Storage="_enrollment", DbType="Int")]
		public System.Nullable<int> enrollment
		{
			get
			{
				return this._enrollment;
			}
			set
			{
				if ((this._enrollment != value))
				{
					this.OnenrollmentChanging(value);
					this.SendPropertyChanging();
					this._enrollment = value;
					this.SendPropertyChanged("enrollment");
					this.OnenrollmentChanged();
				}
			}
		}
		
		[Column(Storage="_faculty_id", DbType="NVarChar(50)")]
		public string faculty_id
		{
			get
			{
				return this._faculty_id;
			}
			set
			{
				if ((this._faculty_id != value))
				{
					if (this._Faculty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfaculty_idChanging(value);
					this.SendPropertyChanging();
					this._faculty_id = value;
					this.SendPropertyChanged("faculty_id");
					this.Onfaculty_idChanged();
				}
			}
		}
		
		[Association(Name="Course_StudentCourse", Storage="_StudentCourses", OtherKey="course_id")]
		public EntitySet<StudentCourse> StudentCourses
		{
			get
			{
				return this._StudentCourses;
			}
			set
			{
				this._StudentCourses.Assign(value);
			}
		}
		
		[Association(Name="Faculty_Course", Storage="_Faculty", ThisKey="faculty_id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Faculty Faculty
		{
			get
			{
				return this._Faculty.Entity;
			}
			set
			{
				Faculty previousValue = this._Faculty.Entity;
				if (((previousValue != value) 
							|| (this._Faculty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Faculty.Entity = null;
						previousValue.Courses.Remove(this);
					}
					this._Faculty.Entity = value;
					if ((value != null))
					{
						value.Courses.Add(this);
						this._faculty_id = value.faculty_id;
					}
					else
					{
						this._faculty_id = default(string);
					}
					this.SendPropertyChanged("Faculty");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StudentCourses(StudentCourse entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_StudentCourses(StudentCourse entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
	}
	
	[Table(Name="dbo.Student")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _student_id;
		
		private string _student_name;
		
		private System.Nullable<double> _gpa;
		
		private System.Nullable<int> _credits;
		
		private string _major;
		
		private string _schoolYear;
		
		private string _email;
		
		private EntitySet<LogIn> _LogIns;
		
		private EntitySet<StudentCourse> _StudentCourses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onstudent_idChanging(string value);
    partial void Onstudent_idChanged();
    partial void Onstudent_nameChanging(string value);
    partial void Onstudent_nameChanged();
    partial void OngpaChanging(System.Nullable<double> value);
    partial void OngpaChanged();
    partial void OncreditsChanging(System.Nullable<int> value);
    partial void OncreditsChanged();
    partial void OnmajorChanging(string value);
    partial void OnmajorChanged();
    partial void OnschoolYearChanging(string value);
    partial void OnschoolYearChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    #endregion
		
		public Student()
		{
			this._LogIns = new EntitySet<LogIn>(new Action<LogIn>(this.attach_LogIns), new Action<LogIn>(this.detach_LogIns));
			this._StudentCourses = new EntitySet<StudentCourse>(new Action<StudentCourse>(this.attach_StudentCourses), new Action<StudentCourse>(this.detach_StudentCourses));
			OnCreated();
		}
		
		[Column(Storage="_student_id", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string student_id
		{
			get
			{
				return this._student_id;
			}
			set
			{
				if ((this._student_id != value))
				{
					this.Onstudent_idChanging(value);
					this.SendPropertyChanging();
					this._student_id = value;
					this.SendPropertyChanged("student_id");
					this.Onstudent_idChanged();
				}
			}
		}
		
		[Column(Storage="_student_name", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string student_name
		{
			get
			{
				return this._student_name;
			}
			set
			{
				if ((this._student_name != value))
				{
					this.Onstudent_nameChanging(value);
					this.SendPropertyChanging();
					this._student_name = value;
					this.SendPropertyChanged("student_name");
					this.Onstudent_nameChanged();
				}
			}
		}
		
		[Column(Storage="_gpa", DbType="Float")]
		public System.Nullable<double> gpa
		{
			get
			{
				return this._gpa;
			}
			set
			{
				if ((this._gpa != value))
				{
					this.OngpaChanging(value);
					this.SendPropertyChanging();
					this._gpa = value;
					this.SendPropertyChanged("gpa");
					this.OngpaChanged();
				}
			}
		}
		
		[Column(Storage="_credits", DbType="Int")]
		public System.Nullable<int> credits
		{
			get
			{
				return this._credits;
			}
			set
			{
				if ((this._credits != value))
				{
					this.OncreditsChanging(value);
					this.SendPropertyChanging();
					this._credits = value;
					this.SendPropertyChanged("credits");
					this.OncreditsChanged();
				}
			}
		}
		
		[Column(Storage="_major", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string major
		{
			get
			{
				return this._major;
			}
			set
			{
				if ((this._major != value))
				{
					this.OnmajorChanging(value);
					this.SendPropertyChanging();
					this._major = value;
					this.SendPropertyChanged("major");
					this.OnmajorChanged();
				}
			}
		}
		
		[Column(Storage="_schoolYear", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string schoolYear
		{
			get
			{
				return this._schoolYear;
			}
			set
			{
				if ((this._schoolYear != value))
				{
					this.OnschoolYearChanging(value);
					this.SendPropertyChanging();
					this._schoolYear = value;
					this.SendPropertyChanged("schoolYear");
					this.OnschoolYearChanged();
				}
			}
		}
		
		[Column(Storage="_email", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[Association(Name="Student_LogIn", Storage="_LogIns", OtherKey="student_id")]
		public EntitySet<LogIn> LogIns
		{
			get
			{
				return this._LogIns;
			}
			set
			{
				this._LogIns.Assign(value);
			}
		}
		
		[Association(Name="Student_StudentCourse", Storage="_StudentCourses", OtherKey="student_id")]
		public EntitySet<StudentCourse> StudentCourses
		{
			get
			{
				return this._StudentCourses;
			}
			set
			{
				this._StudentCourses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LogIns(LogIn entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_LogIns(LogIn entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_StudentCourses(StudentCourse entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_StudentCourses(StudentCourse entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
	
	[Table(Name="dbo.StudentCourse")]
	public partial class StudentCourse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _s_course_id;
		
		private string _student_id;
		
		private string _course_id;
		
		private System.Nullable<int> _credit;
		
		private string _major;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ons_course_idChanging(int value);
    partial void Ons_course_idChanged();
    partial void Onstudent_idChanging(string value);
    partial void Onstudent_idChanged();
    partial void Oncourse_idChanging(string value);
    partial void Oncourse_idChanged();
    partial void OncreditChanging(System.Nullable<int> value);
    partial void OncreditChanged();
    partial void OnmajorChanging(string value);
    partial void OnmajorChanged();
    #endregion
		
		public StudentCourse()
		{
			this._Course = default(EntityRef<Course>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[Column(Storage="_s_course_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int s_course_id
		{
			get
			{
				return this._s_course_id;
			}
			set
			{
				if ((this._s_course_id != value))
				{
					this.Ons_course_idChanging(value);
					this.SendPropertyChanging();
					this._s_course_id = value;
					this.SendPropertyChanged("s_course_id");
					this.Ons_course_idChanged();
				}
			}
		}
		
		[Column(Storage="_student_id", DbType="NVarChar(50)")]
		public string student_id
		{
			get
			{
				return this._student_id;
			}
			set
			{
				if ((this._student_id != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onstudent_idChanging(value);
					this.SendPropertyChanging();
					this._student_id = value;
					this.SendPropertyChanged("student_id");
					this.Onstudent_idChanged();
				}
			}
		}
		
		[Column(Storage="_course_id", DbType="NVarChar(50)")]
		public string course_id
		{
			get
			{
				return this._course_id;
			}
			set
			{
				if ((this._course_id != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncourse_idChanging(value);
					this.SendPropertyChanging();
					this._course_id = value;
					this.SendPropertyChanged("course_id");
					this.Oncourse_idChanged();
				}
			}
		}
		
		[Column(Storage="_credit", DbType="Int")]
		public System.Nullable<int> credit
		{
			get
			{
				return this._credit;
			}
			set
			{
				if ((this._credit != value))
				{
					this.OncreditChanging(value);
					this.SendPropertyChanging();
					this._credit = value;
					this.SendPropertyChanged("credit");
					this.OncreditChanged();
				}
			}
		}
		
		[Column(Storage="_major", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string major
		{
			get
			{
				return this._major;
			}
			set
			{
				if ((this._major != value))
				{
					this.OnmajorChanging(value);
					this.SendPropertyChanging();
					this._major = value;
					this.SendPropertyChanged("major");
					this.OnmajorChanged();
				}
			}
		}
		
		[Association(Name="Course_StudentCourse", Storage="_Course", ThisKey="course_id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.StudentCourses.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.StudentCourses.Add(this);
						this._course_id = value.course_id;
					}
					else
					{
						this._course_id = default(string);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[Association(Name="Student_StudentCourse", Storage="_Student", ThisKey="student_id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.StudentCourses.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.StudentCourses.Add(this);
						this._student_id = value.student_id;
					}
					else
					{
						this._student_id = default(string);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
